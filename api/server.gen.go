// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Welcome Message
	// (GET /)
	WelcomeGet(ctx echo.Context) error
	// View running config
	// (GET /config)
	ConfigGet(ctx echo.Context) error
	// Azure Pricing
	// (GET /metrics/pricing/azure)
	MetricsPricingAzureGet(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// WelcomeGet converts echo context to params.
func (w *ServerInterfaceWrapper) WelcomeGet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WelcomeGet(ctx)
	return err
}

// ConfigGet converts echo context to params.
func (w *ServerInterfaceWrapper) ConfigGet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConfigGet(ctx)
	return err
}

// MetricsPricingAzureGet converts echo context to params.
func (w *ServerInterfaceWrapper) MetricsPricingAzureGet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MetricsPricingAzureGet(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.WelcomeGet)
	router.GET(baseURL+"/config", wrapper.ConfigGet)
	router.GET(baseURL+"/metrics/pricing/azure", wrapper.MetricsPricingAzureGet)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7STQW8TMRCF/4plOG6zAW65VZVAlShUrQQHxMF1Jpsp67EZj7cN1f53tPZum3YDRZW4",
	"RLH8Zmfe5zd32noXPAFJ1Ks7He0WnMl/j38lhnNGCxcQfdsBfw5FFNgHYEHIJ8Pu8kf6ZBwMJ9kF0Csd",
	"hZEa3VfaJmYguzvx68OC1lsj6OnAZV9php8JGdZ69W2/017Zkxbfq+kr/uoarAwtTjxtsJmPbj1NtR+h",
	"g3ZvBCSBBnioHv5yZ9pTOkNKUkpHGSV3VVRcIGVg8b3nQYQCLqtfM2z0Sr+qH2jXI+r6D5z7ex+G2ezy",
	"GR1EMS48j2o+czV3u//FAwYOkfwKrfXlpR+jdBCjafLFGqJlDOVN9Vm5UBiVUTelXE3q6hkbk24+Sp8f",
	"ZuMzCpQ2gxpIHgVGi9QcwW3wLMC60h1wLNMsF8vFm8GID0AmoF7pd4vlYqkrHYxss5V6+GlA5l6OlfXU",
	"ISGQKKB18EiiNp7VzidW0RDKTglEWejcgnNET9d6NZH7AFJYB0+xoHu7XI5hFKDc1YTQYol3fR3LapS4",
	"PBem6X0yn8fDXyZrIcZNatXF2D7zjsk5w7uHEdX4ZPm2tve7cxDJJYCSLaiSLFGj/Kn7soH/2fy45i/y",
	"/gXhRnEiQmomE9m/A2G0sR5jVeeQ/SUh5+wdyBZSVGPpEBBnRGCtfAfcDZ38RuW9V2XdZrzOSul5aZql",
	"/wRP4Fbq0Bp8jO1FSB4GLKvZ978DAAD//wpMw+UuBgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
